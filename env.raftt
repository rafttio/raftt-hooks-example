load('filesystem.star', 'fs')
load("encoding/json.star", "json")

tf_output = json.decode(fs.File("./tf/output/tf-out.json").read_text())

deploy_dev_container(docker_compose("./dev/dev-compose.yml"))

resources = helm_local_chart("toodoo", "./helm", values_files="./helm/values-dev.yaml")
repo_root = repo_volume()

web = resources.deployments["web"]
web.map_port(local=3000, remote=3000)
web.image_builder = build_image("web", context=".", dockerfile="./docker/web/Dockerfile")
web.mount(repo_root, dst="/app")
web.add_env_vars({"S3_OBJ_URI": tf_output["object_s3_uri"]["value"]})

live_backend = resources.deployments["live-backend"]
live_backend.map_port(local=3002, remote=3001)
live_backend.image_builder = build_image("live-backend", context=".", dockerfile="./docker/live_backend/Dockerfile")
live_backend.mount(repo_root, dst="/app")

async_handler = resources.deployments["async-handler"]
async_handler.image_builder = build_image("async-handler", context=".", dockerfile="./docker/async_handler/Dockerfile")
async_handler.mount(repo_root.subpath("./async_handler"), dst="/app")
async_handler.mount(volume("ah_node_modules"), dst="/app/node_modules", init_on_rebuild=True)
async_handler.mount(volume("ah_dist"), dst="/app/dist", init_on_rebuild=True)

db_pod = resources.pods["db"]
db_volume = volume("database_data")
db_volume.initializer = postgres_volume_initializer(workload=db_pod, dump_file_path="./dev/dump.sql", user="postgres")
db_pod.mount(db_volume, dst="/var/lib/postgresql/data")

kafka_ui = resources.pods["kafka-ui"]
kafka_ui.map_port(local=8080, remote=8080)

register_hook(
    on=events.OnFileChanged(
        workload=web,
        patterns="/app/requirements.txt"
    ),
    do=actions.CMD(
        workload=web,
        cmd=["pip", "install", "-r", "requirements.txt"]
    )
)

register_hook(
    on=events.OnFileChanged(
        workload=async_handler,
        patterns="/app/src/**/*.ts"
    ),
    do=actions.CMD(
        workload=async_handler,
        cmd=["yarn", "build"]
    )
)

deploy(resources)
